<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="2021/06/03/7%E5%A4%A7%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
      <url>2021/06/03/7%E5%A4%A7%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h2 id="7大设计原则"><a href="#7大设计原则" class="headerlink" title="7大设计原则"></a>7大设计原则</h2><p>面向对象设计原则很重要，只有了解了面向对象设计原则，再学习各个设计模式的时候才能更好的掌握和理解。</p><hr><ul><li><strong>单一职责：</strong><br>一个类只负责一个功能领域中的相应职责，或者可以定义为：就一个类而言，应该只有一个引起它变化的原因。</li></ul><p>比较好理解，就是一个类别给它塞乱七八糟的功能点，这样会变得肥大，后期如果需要维护就会变得异常令人恶心。</p><ul><li><strong>开闭原则：</strong><br>一个软件实体应当对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。</li></ul><p>这个其实就是设计模式的目标，就是为了后期代码维护的时候尽量不修改原代码</p><ul><li><strong>里氏替换：</strong><br>所有引用基类（父类）的地方必须能透明地使用其子类的对象。</li></ul><p>大白话讲就是能用子类替换所有用父类写的代码，就是代码里多用父类对象写的话能够增强代码拓展性，因为到时候新增个子类就能替换原来的逻辑。</p><ul><li><strong>依赖倒置：</strong><br>抽象不应该依赖于细节，细节应当依赖于抽象。换言之，要针对接口编程，而不是针对实现编程。</li></ul><p>讲人话，用抽象去引用，实现细节子类中实现</p><p>这句话我觉得是特别好的总结：**==开闭原则是目标，里氏代换原则是基础，依赖倒转原则是手段==**</p><ul><li><strong>接口隔离：</strong><br>使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。</li></ul><p>大白话就是接口需要的话拆分细粒化，如果一个接口里面有两类属性方法的话，其实现类如果只有一种属性，那么另外一个方法就会变成一个空方法。</p><ul><li><strong>合成复用：</strong><br>尽量使用对象组合，而不是继承来达到复用的目的。</li></ul><p>就是尽量用组合的方式，一个类中包含另一个属性类的方式，这样更加灵活。</p><p>以下的总结挺好的：</p><p> 通过组合/聚合关系或通过继承，但首先应该考虑使用组合/聚合，组合/聚合可以使系统更加灵活，降低类与类之间的耦合度，<br>一个类的变化对其他类造成的影响相对较少；其次才考虑继承，在使用继承时，需要严格遵循里氏代换原则，有效使用继承会<br>有助于对问题的理解，降低复杂度，而滥用继承反而会增加系统构建和维护的难度以及系统的复杂度，因此需要慎重使用继承复用。</p><p>通过继承来进行复用的主要问题在于继承复用会破坏系统的封装性，因为继承会将基类的实现细节暴露给子类，由于基类的内部<br>细节通常对子类来说是可见的，所以这种复用又称“白箱”复用，如果基类发生改变，那么子类的实现也不得不发生改变；从基类<br>继承而来的实现是静态的，不可能在运行时发生改变，没有足够的灵活性；而且继承只能在有限的环境中使用（如类没有声明为不能被继承）。</p><ul><li><strong>迪米特法则：</strong><br>一个软件实体应当尽可能少地与其他实体发生相互作用。</li></ul><p>解释一下就是只调用“自己人”，以下为自己人：  </p><p>(1) 当前对象本身(this)；<br>(2) 以参数形式传入到当前对象方法中的对象；<br>(3) 当前对象的成员对象；<br>(4) 如果当前对象的成员对象是一个集合，那么集合中的元素也都是朋友；<br>(5) 当前对象所创建的对象。  </p><p>可能还是不太明白，那就举一个列子：<br>有个Human类，其有一个wallet类的参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Customer&#123;</span><br><span class="line">    private Wallet wallet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Wallet&#123;</span><br><span class="line">    private Long money;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下就是违反迪米特法则的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Cashier&#123;</span><br><span class="line">   public collectMoney(Customer customer,long money) &#123;</span><br><span class="line">      Wallet wallet = customer.getWallet();</span><br><span class="line">      if(wallet.getMoney()&gt;=money)&#123;</span><br><span class="line">        ...</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Cashier中colletMoney()操作了不是“自己人”的Wallet，违反了迪米特法则。</p><p>正确的应该是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Cashier&#123;</span><br><span class="line">   public collectMoney(Customer customer,long money) &#123;</span><br><span class="line">      customer.pay(money);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Customer&#123;</span><br><span class="line">    private Wallet wallet;</span><br><span class="line">    public boolean pay(Long amount)&#123;</span><br><span class="line">        Long money = wallet.getMoney();</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过customer调用，这样才没有违反迪米特法则</p><hr><p>以上就是7大面向对象设计原则，学好它我们才能更好的理解和学习设计模式。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
